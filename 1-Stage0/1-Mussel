# cgnutools: mussel
# Build as cmlfs user

# Download mussel to build a toolchain
cd $CMLFS/sources
git clone https://github.com/Xiaoyue2532/mussel

cd mussel

# Make sure host has all requirements:
./check

# Patch to Modify ./mussel.sh to change these:
# MPREFIX="/cgnutools"
# MSYSROOT="/cgnutools"
patch -Np1 -i ../patches/mussel-change-variables.patch

# Apply patch to add compatibility links for cross AR and RANLIB
patch -Np1 -i ../patches/mussel-add-missing-symlinks.patch

# If compiling with LLVM, prefix commands with LLVM=1 
# to build kernel headers
patch -Np1 -i ../patches/mussel-LLVM_for_headers.patch

# Build toolchain. Amend PATH to include /cgnutools/bin
# o Omit -p if not building in parallel to use all the host's CPU cores
sudo PATH="/cgnutools/bin:$PATH" ./mussel x86_64 -l -o -k -p -g -T "cmlfs"

# Make sure cgnutools is owned by cmlfs
sudo chown -vR cmlfs $CMLFS/cgnutools

# Remove unneeded documentation
rm -rfv /cgnutools/share/{man,info}

# The new cross compiler has built-in specs which refer to the musl
# dynamic loader /lib/ld-musl-x86_64.so.1... which will not exist on
# glibc hosts. We have to adjust this to build up the llvmtools with
# /llvmtools/lib/ld-musl-x86_64.so.1, but keep the cross-gcc in
# cgnutools.
# This will be reached by creating a modified specs file in the
# proper location:
export MCGV=$(/cgnutools/bin/x86_64-cmlfs-linux-musl-gcc --version | sed 1q | cut -d' ' -f3- )
/cgnutools/bin/x86_64-cmlfs-linux-musl-gcc -dumpspecs | sed 's/\/lib\/ld-musl/\/llvmtools\/lib\/ld-musl/g' > /cgnutools/lib/gcc/x86_64-cmlfs-linux-musl/$MCGV/specs

# Test the _tools toolchain:
cd $CMLFS/sources
printf "#include <stdio.h>\nint main(){}\n" > dummy.c
/cgnutools/bin/x86_64-cmlfs-linux-musl-gcc dummy.c
readelf -l a.out | grep ld

# Should output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]
# If matching, clean up:
rm -rf a.out dummy.c
