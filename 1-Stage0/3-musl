# llvmtools: Musl libc
# Build as cmlfs

# binaries built by the stage0 gcc would rely on /llvmtools/lib/ld-musl-x86_64.so.1
# so musl has to be built and installed in /llvmtools

# Configure with freshly built GCC
./configure \
    CROSS_COMPILE=x86_64-cmlfs-linux-musl- \
    --prefix=/usr \
    --target=x86_64-cmlfs-linux-musl

# Buid and install
make -j`nproc --all` && make DESTDIR=/llvmtools install

# Fix a symlink, which may cause "Permission Denied"
rm -v /llvmtools/lib/ld-musl-x86_64.so.1
ln -sv libc.so /llvmtools/lib/ld-musl-x86_64.so.1

# Create a symlink that can be used to print
# the required shared objects of a program or
# shared object
mkdir /llvmtools/{etc,bin}
ln -sv ../lib/libc.so /llvmtools/bin/ldd

# Configure the dynamic linker
cat > /llvmtools/etc/ld-musl-x86_64.path <<EOF
/llvmtools/lib
/llvmtools/x86_64-cmlfs-linux-musl/lib
/llvmtools/lib/x86_64-cmlfs-linux-musl
EOF

# Since llvmtools now has a libc, the cross GCC compiler (located
# in /cgnutools) will need a built-in specs that refers to the freshly
# compile musl dynamic loader /llvmtools/lib/ld-musl-x86_64.so.1.
# We have to adjust this to build up the llvmtools with
# /llvmtools/lib/ld-musl-x86_64.so.1, but keep the cross-gcc in
# cgnutools.
# This will be reached by creating a modified specs file in the
# proper location:
export MCGV=$(/cgnutools/bin/x86_64-cmlfs-linux-musl-gcc --version | sed 1q | cut -d' ' -f3- )
/cgnutools/bin/x86_64-cmlfs-linux-musl-gcc -dumpspecs | sed 's/\/lib\/ld-musl/\/llvmtools\/lib\/ld-musl/g' > /cgnutools/lib/gcc/x86_64-cmlfs-linux-musl/$MCGV/specs

# Test the _tools toolchain:
cd $CMLFS/sources
printf "#include <stdio.h>\nint main(){}\n" > dummy.c
x86_64-cmlfs-linux-musl-gcc dummy.c
readelf -l a.out | grep ld

# Should output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1]
# If matching, clean up:
rm -rf a.out dummy.c
