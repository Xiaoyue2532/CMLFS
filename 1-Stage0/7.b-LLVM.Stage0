# cgnutools: Stage0 Clang (with compiler-rt, libcxx, libcxxabi, libunwind)
# Build as cmlfs
#
# o Reuse llvm-project source tree from before
# o stage 0 Clang will depend on libgcc_s. It will build stage1 w/o libgcc_s
# o Stage0 wll install in cgnutools, but Sysroot will be llvmtools. This will
#   avoid duplicate building of packages.

# Force clang to use dynamic linux loader in /llvmtools
patch -Np1 -i ../../CMLFS/patches/llvm-cmlfs/modify-toolchain-dynamic-loader.llvmtools.patch
patch -Np1 -i ../../CMLFS/patches/llvm-cmlfs/modify-test-dynamic-loader.llvmtools.patch

# Restore -nostdlibc changes
# clang we use in the following stages support stdinc
# revert patch
# patch -Np1 -R -i ../../CMLFS/patches/llvm-cmlfs/runtimes-Probe-for-nostdlib-and-nostdinc-with-the-C-.patch

# LLVM-19.1.7 needs to modify these: 
# - libunwind/include/unwind.h: <__libunwind_config.h> -> "__libunwind_config.h"
# - libunwind/include/unwind.h: <unwind_itanium.h> -> "unwind_itanium.h"

# Built llvm-tblgen will need libstdc++.so.6 & libgcc_s.so.1.
# Set the rpath
export CFLAGS="-fPIC -Wl,-rpath=/cgnutools/lib"
export CXXFLAGS=$CFLAGS

cmake \
    -B build -S llvm \
    -G Ninja -Wno-dev \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="/cgnutools" \
    -DCMAKE_C_COMPILER="x86_64-cmlfs-linux-musl-gcc" \
    -DCMAKE_CXX_COMPILER="x86_64-cmlfs-linux-musl-g++" \
    -DCMAKE_AR="/cgnutools/bin/x86_64-cmlfs-linux-musl-ar" \
    -DCMAKE_NM="/cgnutools/bin/x86_64-cmlfs-linux-musl-nm" \
    -DCMAKE_RANLIB="/cgnutools/bin/x86_64-cmlfs-linux-musl-ranlib" \
    -DCLANG_BUILD_EXAMPLES=OFF \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_LINKER=mold \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_INCLUDE_TESTS=OFF \
    -DCOMPILER_RT_BUILD_GWP_ASAN=OFF \
    -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
    -DCOMPILER_RT_BUILD_MEMPROF=OFF \
    -DCOMPILER_RT_BUILD_PROFILE=OFF \
    -DCOMPILER_RT_BUILD_SANITIZERS=OFF \
    -DCOMPILER_RT_BUILD_XRAY=OFF \
    -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="x86_64-cmlfs-linux-musl" \
    -DCOMPILER_RT_INCLUDE_TESTS=OFF \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=OFF \
    -DCOMPILER_RT_USE_LLVM_UNWINDER=ON \
    -DDEFAULT_SYSROOT="/llvmtools" \
    -DENABLE_LINKER_BUILD_ID=ON \
    -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
    -DLIBCXXABI_INCLUDE_TESTS=OFF \
    -DLIBCXXABI_USE_COMPILER_RT=OFF \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_ENABLE_LOCALIZATION=ON \
    -DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=ON \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
    -DLIBCXX_HARDENING_MODE=fast \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -DLIBCXX_INCLUDE_BENCHMARKS=OFF \
    -DLIBCXX_INCLUDE_DOCS=OFF \
    -DLIBCXX_INCLUDE_TESTS=OFF \
    -DLIBCXX_USE_COMPILER_RT=OFF \
    -DLIBUNWIND_INCLUDE_DOCS=OFF \
    -DLIBUNWIND_INCLUDE_TESTS=OFF \
    -DLIBUNWIND_INSTALL_HEADERS=ON \
    -DLLVM_BUILD_BENCHMARKS=OFF \
    -DLLVM_BUILD_DOCS=OFF \
    -DLLVM_BUILD_EXAMPLES=OFF \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_BUILD_UTILS=OFF \
    -DLLVM_CCACHE_BUILD=ON \
    -DLLVM_DEFAULT_TARGET_TRIPLE="x86_64-cmlfs-linux-musl" \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_LIBEDIT=OFF \
    -DLLVM_ENABLE_LIBPFM=OFF \
    -DLLVM_ENABLE_LIBXML2=OFF \
    -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=OFF \
    -DLLVM_ENABLE_PROJECTS="clang" \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_RUNTIMES="compiler-rt;libunwind;libcxx;libcxxabi" \
    -DLLVM_ENABLE_ZLIB=ON \
    -DLLVM_ENABLE_ZSTD=OFF \
    -DLLVM_HOST_TRIPLE="x86_64-cmlfs-linux-musl" \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DLLVM_INCLUDE_DOCS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INSTALL_UTILS=OFF \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DLLVM_TARGETS_TO_BUILD="Native;host" \
    -DLLVM_TARGET_ARCH="host" \
    -DLLVM_USE_LINKER=mold

# compile
cmake --build build

# For troubleshooting, this is the breakdown of build targets:
# Note: Order from least to most deps not acertained yet.
ninja -C build clang # ............................................. PASS
ninja -C build llvm-tblgen # ....................................... PASS
ninja -C build llvm-lib # 1868 targets ............................. PASS
ninja -C build cxxabi # 1370 targets ............................... PASS
ninja -C build cxx # 105 targets ................................... PASS
ninja -C build libclang # 31 targets ............................... PASS
ninja -C build compiler-rt # 5 targets ............................. PASS
ninja -C build unwind # 5 targets .................................. PASS
ninja -C build builtins # 3 targets ................................ PASS
ninja -C build # 570 ............................................... PASS

# install to cgnutools
cmake --install build --strip

ln -sv clang-21 /cgnutools/bin/x86_64-cmlfs-linux-musl-clang
ln -sv clang-21 /cgnutools/bin/x86_64-cmlfs-linux-musl-clang++

# Disable cross libgcc ... we will use stage0 clang instead
mv -v /cgnutools/lib/gcc{,-disabled}

# Configure stage0 clang
cat > /cgnutools/bin/x86_64-cmlfs-linux-musl.cfg <<EOF
-L/cgnutools/lib
-nostdinc++
-I/cgnutools/include/c++/v1
-I/llvmtools/include
EOF

# Binaries built by stage0 clang will look for libc++ .
# Add a search path for the dynamic linker/loader in llvmtools:
echo "/cgnutools/lib" >> /llvmtools/etc/ld-musl-x86_64.path

# Test stage0 Clang
echo "int main() {}" > dummy.c
/cgnutools/bin/x86_64-cmlfs-linux-musl-clang \
    dummy.c -v -Wl,--verbose &> dummy.log
llvm-readelf -l a.out | grep ': /llvmtools'
# Shoud output:
# [Requesting program interpreter: /llvmtools/lib/ld-musl-x86_64.so.1

# Check if the correct start files are used
grep  'crt[1in]' dummy.log | grep ld:
# Should output:
# ld: /llvmtools/lib/Scrt1.o
# ld: /llvmtools/lib/crti.o
# ld: /llvmtools/lib/crtn.o

# Make sure no libraries are loaded from the host
grep ld:  dummy.log
# Should output:
# ld: /llvmtools/lib/Scrt1.o
# ld: /llvmtools/lib/crti.o
# ld: /cgnutools/lib/clang/21/lib/linux/clang_rt.crtbegin-x86_64.o
# ld: /tmp/dummy-ffb57c.o
# ld: /mnt/cmlfs/cgnutools/lib/clang/21/lib/linux/libclang_rt.builtins-x86_64.a
# ld: /llvmtools/lib/libunwind.so
# ld: /llvmtools/lib/libatomic.so
# ld: /llvmtools/lib/libc.so
# ld: /cgnutools/lib/clang/21/lib/linux/libclang_rt.builtins-x86_64.a
# ld: /llvmtools/lib/libunwind.so
# ld: /cgnutools/lib/clang/21/lib/linux/clang_rt.crtend-x86_64.o
# ld: /llvmtools/lib/crtn.o

# Verify that stage0 clang is searching for the correct header files:
grep -B2 -A1 '^ /llvmtools/usr/include' dummy.log
# It should output in this order:
# /cgnutools/include/c++/v1
# /llvmtools/usr/include
# /cgnutools/lib/clang/21/include
# NOTE: The libc++ headers should be searched first before any other header directories.

# Check if stage0 clang++ [in llvmtools] has atomics.
cat > atomics-test.cpp << "EOF"
#include <atomic>
std::atomic<int> x;
std::atomic<short> y;
std::atomic<char> z;
int main() {
    ++z;
    ++y;
    return ++x;
}
EOF

/cgnutools/bin/x86_64-cmlfs-linux-musl-clang++ \
    atomics-test.cpp -v -Wl,--verbose &> atomics-test.log

# Check for errors during compile or link:
grep error:  atomics-test.log
# Should return nothing if there are no errors.

# Test if stage0 clang support C++11
cat > cxx11-test.cpp << "EOF"
#include <iostream>

int main(){
#if __cplusplus==201402L
    std::cout << "C++14" << std::endl;
#elif __cplusplus==201103L
    std::cout << "C++11" << std::endl;
#else
    std::cout << "C++" << std::endl;
#endif

    return 0;
}
EOF

/cgnutools/bin/x86_64-cmlfs-linux-musl-clang++ \
    cxx11-test.cpp -v -Wl,--verbose &> cxx11-test.log

# Check for errors during compile or link:
grep error: cxx11-test.log
# Should return nothing if there are no errors.

# Execute the binary. Should output "C++" ... which may be a problem later.
./a.out

# If all is good, remove build directory. Sourc tree will be re-used later
rm -rf build dummy.* atomics-test.* cxx11-test.* a.out
